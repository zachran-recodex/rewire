name: Deploy Debug

on:
  workflow_dispatch:  # Manual trigger for debugging
  push:
    branches:
      - deploy

jobs:
  debug-ssh:
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug GitHub Secrets
        run: |
          echo "=== GitHub Secrets Debug ==="
          echo "VPS_HOST length: ${#VPS_HOST}"
          echo "VPS_USERNAME length: ${#VPS_USERNAME}" 
          echo "VPS_PORT: $VPS_PORT"
          echo "VPS_SSH_KEY length: ${#VPS_SSH_KEY}"
          echo "VPS_PATH length: ${#VPS_PATH}"
          
          # Check if secrets are actually set
          [ -n "$VPS_HOST" ] && echo "✅ VPS_HOST is set" || echo "❌ VPS_HOST is empty"
          [ -n "$VPS_USERNAME" ] && echo "✅ VPS_USERNAME is set" || echo "❌ VPS_USERNAME is empty"
          [ -n "$VPS_SSH_KEY" ] && echo "✅ VPS_SSH_KEY is set" || echo "❌ VPS_SSH_KEY is empty"
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
          VPS_PATH: ${{ secrets.VPS_PATH }}

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write SSH key directly from GitHub Secret
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Debug SSH key format
          echo "=== SSH Key Debug Info ==="
          echo "File exists: $(test -f ~/.ssh/id_rsa && echo 'YES' || echo 'NO')"
          echo "File size: $(wc -c < ~/.ssh/id_rsa) bytes"
          echo "File type: $(file ~/.ssh/id_rsa)"
          echo "First line: $(head -n 1 ~/.ssh/id_rsa)"
          echo "Last line: $(tail -n 1 ~/.ssh/id_rsa)"
          echo "Line count: $(wc -l < ~/.ssh/id_rsa)"
          echo "File permissions: $(ls -l ~/.ssh/id_rsa)"
          
          # Test SSH key validity  
          echo "=== SSH Key Validation ==="
          ssh-keygen -l -f ~/.ssh/id_rsa && echo "✅ SSH key is valid" || echo "❌ SSH key format issue"
          
          # Check if key has passphrase
          ssh-keygen -y -f ~/.ssh/id_rsa > /dev/null && echo "✅ Key can generate public key" || echo "❌ Key may have passphrase or be invalid"
          
          # Add known hosts
          echo "=== Adding known hosts ==="
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null && echo "✅ Host key added" || echo "⚠️ Could not add host key"
          
          # Create SSH config for easier connection
          cat > ~/.ssh/config << 'EOF'
          Host vps-server
            HostName ${{ secrets.VPS_HOST }}
            User ${{ secrets.VPS_USERNAME }}
            Port ${{ secrets.VPS_PORT }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            PasswordAuthentication no
            PubkeyAuthentication yes
            IdentitiesOnly yes
            LogLevel DEBUG3
          EOF
          chmod 600 ~/.ssh/config
          
          echo "=== SSH Config Created ==="
          cat ~/.ssh/config

      - name: Verify SSH Key Fingerprint on Server
        continue-on-error: true
        run: |
          echo "=== Generating Public Key from Private Key ==="
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub || echo "Failed to generate public key"
          
          echo "=== Local Public Key (from private key) ==="
          cat ~/.ssh/id_rsa.pub || echo "No public key generated"
          
          echo "=== Public Key Fingerprint ==="
          ssh-keygen -l -f ~/.ssh/id_rsa.pub || echo "Cannot generate fingerprint"

      - name: Test SSH Connection - Method 1 (Basic)
        continue-on-error: true
        run: |
          echo "=== Testing SSH Connection (Method 1 - Basic) ==="
          timeout 30 ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} 'echo "SSH SUCCESS"; whoami; pwd' || echo "❌ Method 1 failed"
          
      - name: Test SSH Connection - Method 2 (Verbose Debug)
        continue-on-error: true
        run: |
          echo "=== Testing SSH Connection (Method 2 - Debug Mode) ==="
          timeout 30 ssh -vvv -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} 'echo "SSH DEBUG SUCCESS"' 2>&1 | head -50 || echo "❌ Method 2 failed"
          
      - name: Test SSH Connection - Method 3 (Config File)
        continue-on-error: true  
        run: |
          echo "=== Testing SSH Connection (Method 3 - Config File) ==="
          timeout 30 ssh -o BatchMode=yes -F ~/.ssh/config vps-server 'echo "SSH CONFIG SUCCESS"; whoami; pwd; date' || echo "❌ Method 3 failed"
          
      - name: Test SSH Connection - Method 4 (Alternative Key)
        continue-on-error: true
        run: |
          echo "=== Testing SSH Connection (Method 4 - Copy Key) ==="
          cp ~/.ssh/id_rsa ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions
          timeout 30 ssh -o BatchMode=yes -o StrictHostKeyChecking=no -i ~/.ssh/github_actions -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} 'echo "SSH COPY SUCCESS"' || echo "❌ Method 4 failed"

      - name: Final SSH Test - If Any Method Worked
        continue-on-error: true
        run: |
          echo "=== Final SSH Test ==="
          echo "Trying to connect and verify server details..."
          
          # Try each successful connection method
          for method in "ssh -i ~/.ssh/id_rsa" "ssh -F ~/.ssh/config vps-server"; do
            echo "Attempting: $method"
            timeout 30 $method -o BatchMode=yes -o ConnectTimeout=5 ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
              echo "🎉 SSH CONNECTION SUCCESSFUL!"
              echo "User: $(whoami)"
              echo "Home: $(pwd)"
              echo "Server: $(hostname)"
              echo "Date: $(date)"
              echo "Authorized keys on server:"
              head -n 5 ~/.ssh/authorized_keys 2>/dev/null || echo "Cannot read authorized_keys"
            ' && break
          done

      - name: Check VPS Environment
        run: |
          # Only run this if we have a working SSH connection
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
            echo "=== System Info ==="
            uname -a
            
            echo "=== User Info ==="
            whoami
            id
            
            echo "=== Application Path ==="
            ls -la ${{ secrets.VPS_PATH }}
            
            echo "=== Git Status ==="
            cd ${{ secrets.VPS_PATH }}
            git remote -v
            git branch -a
            git status
            
            echo "=== PHP/Composer Version ==="
            php --version
            composer --version
            
            echo "=== Node/NPM Version ==="
            node --version
            npm --version
          '

  deploy:
    needs: debug-ssh
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
            set -e
            echo "🚀 Starting deployment..."
            
            cd ${{ secrets.VPS_PATH }}
            
            # Check and fix permissions first
            echo "🔐 Checking and fixing permissions..."
            sudo chown -R $USER:$USER .
            chmod u+w . .env 2>/dev/null || true
            
            # Backup environment
            echo "💾 Backing up environment..."
            if [ -f .env ]; then
              cp .env .env.backup
              echo "✅ Environment file backed up"
            else
              echo "⚠️  No .env file found, creating from .env.example"
              cp .env.example .env || echo "No .env.example found"
            fi
            
            # Pull latest changes  
            echo "⬇️ Pulling latest changes..."
            git fetch origin
            git reset --hard origin/deploy
            
            # Install dependencies
            echo "📦 Installing dependencies..."
            composer install --optimize-autoloader --no-dev --no-interaction
            npm ci && npm run build
            
            # Restore environment
            echo "🔧 Restoring environment..."
            if [ -f .env.backup ]; then
              cp .env.backup .env
              echo "✅ Environment file restored"
            else
              echo "⚠️  No backup found, keeping current .env"
            fi
            
            # Create deployment info file
            echo "📝 Creating deployment info..."
            cat > deployment.json << 'DEPLOYEOF'
            {
                "deployed_at": "$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")",
                "commit_hash": "$(git rev-parse HEAD)",
                "commit_short": "$(git rev-parse --short HEAD)",
                "branch": "$(git rev-parse --abbrev-ref HEAD)",
                "tag": "$(git describe --tags --exact-match 2>/dev/null || echo 'none')",
                "deployed_by": "GitHub Actions",
                "environment": "debug"
            }
            DEPLOYEOF
            
            # Laravel optimizations
            echo "⚡ Running optimizations..."
            php artisan config:clear
            php artisan cache:clear
            php artisan migrate --force
            php artisan db:seed --force --class=RolesSeeder
            php artisan optimize
            php artisan queue:restart
            
            # Set proper permissions (correct order)
            echo "🔐 Setting proper permissions..."
            # 1. Set user ownership first for deployment operations
            sudo chown -R $USER:$USER .
            # 2. Set web server ownership for Laravel writable directories
            sudo chown -R www-data:www-data storage bootstrap/cache
            # 3. Set permissions with sudo (since owned by www-data)
            sudo chmod -R 775 storage bootstrap/cache
            chmod u+w .env
            
            # Cleanup
            echo "🧹 Cleaning up..."
            rm -f .env.backup
            
            echo "✅ Deployment completed successfully!"
          '

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          curl -f ${{ secrets.APP_URL }}/up || echo "Health check failed"