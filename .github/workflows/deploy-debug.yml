name: Deploy Debug

on:
  workflow_dispatch:  # Manual trigger for debugging
  push:
    branches:
      - deploy

jobs:
  debug-ssh:
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          
          # Write SSH key with proper formatting
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa_raw
          
          # Convert key format if needed (handle base64 or newline issues)
          if grep -q "BEGIN PRIVATE KEY" ~/.ssh/id_rsa_raw; then
            cp ~/.ssh/id_rsa_raw ~/.ssh/id_rsa
          elif grep -q "BEGIN RSA PRIVATE KEY" ~/.ssh/id_rsa_raw; then
            cp ~/.ssh/id_rsa_raw ~/.ssh/id_rsa
          elif grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/id_rsa_raw; then
            cp ~/.ssh/id_rsa_raw ~/.ssh/id_rsa
          else
            # Try base64 decode
            echo "${{ secrets.VPS_SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa 2>/dev/null || cp ~/.ssh/id_rsa_raw ~/.ssh/id_rsa
          fi
          
          chmod 600 ~/.ssh/id_rsa
          
          # Debug SSH key format
          echo "=== SSH Key Debug Info ==="
          echo "File type: $(file ~/.ssh/id_rsa)"
          echo "First line: $(head -n 1 ~/.ssh/id_rsa)"
          echo "Last line: $(tail -n 1 ~/.ssh/id_rsa)"
          echo "Line count: $(wc -l < ~/.ssh/id_rsa)"
          echo "File size: $(wc -c < ~/.ssh/id_rsa)"
          
          # Test SSH key validity
          ssh-keygen -l -f ~/.ssh/id_rsa && echo "✅ SSH key is valid" || echo "❌ SSH key format issue"
          
          # Add known hosts with error handling
          echo "=== Adding known hosts ==="
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null && echo "✅ Host key added" || echo "⚠️ Could not add host key"
          
          # Set SSH client config
          cat > ~/.ssh/config << EOF
          Host vps
            HostName ${{ secrets.VPS_HOST }}
            User ${{ secrets.VPS_USERNAME }}
            Port ${{ secrets.VPS_PORT }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            PasswordAuthentication no
            PubkeyAuthentication yes
            IdentitiesOnly yes
          EOF

      - name: Test SSH Connection - Method 1
        continue-on-error: true
        run: |
          echo "=== Testing SSH Connection (Method 1) ==="
          ssh -vvv -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} 'echo "SSH Connection Successful"; whoami; pwd' || echo "Method 1 failed"
          
      - name: Test SSH Connection - Method 2 (with IdentityFile)
        continue-on-error: true
        run: |
          echo "=== Testing SSH Connection (Method 2) ==="
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} 'echo "SSH Connection Successful"; whoami; pwd' || echo "Method 2 failed"
          
      - name: Test SSH Connection - Method 3 (password auth disabled)
        continue-on-error: true  
        run: |
          echo "=== Testing SSH Connection (Method 3) ==="
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PasswordAuthentication=no -o PubkeyAuthentication=yes -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} 'echo "SSH Connection Successful"; whoami; pwd' || echo "Method 3 failed"
          
      - name: Test SSH Connection - Method 4 (using SSH config)
        continue-on-error: true
        run: |
          echo "=== Testing SSH Connection (Method 4 - SSH Config) ==="
          ssh vps 'echo "SSH Connection via config successful!"; whoami; pwd; uname -a' || echo "Method 4 failed"

      - name: Check VPS Environment
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
            echo "=== System Info ==="
            uname -a
            
            echo "=== User Info ==="
            whoami
            id
            
            echo "=== Application Path ==="
            ls -la ${{ secrets.VPS_PATH }}
            
            echo "=== Git Status ==="
            cd ${{ secrets.VPS_PATH }}
            git remote -v
            git branch -a
            git status
            
            echo "=== PHP/Composer Version ==="
            php --version
            composer --version
            
            echo "=== Node/NPM Version ==="
            node --version
            npm --version
          '

  deploy:
    needs: debug-ssh
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
            set -e
            echo "🚀 Starting deployment..."
            
            cd ${{ secrets.VPS_PATH }}
            
            # Backup environment
            echo "💾 Backing up environment..."
            cp .env .env.backup
            
            # Pull latest changes  
            echo "⬇️ Pulling latest changes..."
            git fetch origin
            git reset --hard origin/deploy
            
            # Install dependencies
            echo "📦 Installing dependencies..."
            composer install --optimize-autoloader --no-dev --no-interaction
            npm ci && npm run build
            
            # Restore environment
            echo "🔧 Restoring environment..."
            cp .env.backup .env
            
            # Laravel optimizations
            echo "⚡ Running optimizations..."
            php artisan config:clear
            php artisan cache:clear
            php artisan migrate --force
            php artisan db:seed --force --class=RolesSeeder
            php artisan optimize
            php artisan queue:restart
            
            # Set permissions
            echo "🔐 Setting permissions..."
            chmod -R 775 storage bootstrap/cache
            
            # Cleanup
            echo "🧹 Cleaning up..."
            rm -f .env.backup
            
            echo "✅ Deployment completed successfully!"
          '

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          curl -f ${{ secrets.APP_URL }}/up || echo "Health check failed"