name: deploy

on:
  workflow_run:
    workflows: ["tests"]
    types:
      - completed
    branches:
      - deploy
  workflow_dispatch:  # Allow manual trigger for testing

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: Production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer:v2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Add Flux Credentials
        run: composer config http-basic.composer.fluxui.dev "${{ secrets.FLUX_USERNAME }}" "${{ secrets.FLUX_LICENSE_KEY }}"

      - name: Install Dependencies
        run: |
          composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist
          npm ci

      - name: Build Assets
        run: npm run build

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 30s
          script: |
            echo "üîó SSH connection successful!"
            whoami
            pwd
            echo "Server info: $(uname -a)"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 300s
          command_timeout: 60s
          debug: false
          script: |
            set -e  # Exit on any error
            echo "üöÄ Starting deployment..."

            # Navigate to application directory
            echo "üìÅ Navigating to application directory..."
            cd ${{ secrets.VPS_PATH }}
            pwd

            # Check git status
            echo "üîç Checking git status..."
            git status
            git branch

            # Check and fix permissions first
            echo "üîê Checking and fixing permissions..."
            sudo chown -R $USER:$USER .
            chmod u+w . .env 2>/dev/null || true

            # Backup current version
            echo "üíæ Backing up environment file..."
            if [ -f .env ]; then
              cp .env .env.backup
              echo "‚úÖ Environment file backed up"
            else
              echo "‚ö†Ô∏è  No .env file found, creating from .env.example"
              cp .env.example .env || echo "No .env.example found"
            fi

            # Pull latest changes
            echo "‚¨áÔ∏è Pulling latest changes..."
            git fetch origin
            git reset --hard origin/deploy

            # Install dependencies
            echo "üì¶ Installing composer dependencies..."
            composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist

            echo "üì¶ Installing npm dependencies and building assets..."
            npm ci && npm run build

            # Restore environment file
            echo "üîß Restoring environment file..."
            if [ -f .env.backup ]; then
              cp .env.backup .env
              echo "‚úÖ Environment file restored"
            else
              echo "‚ö†Ô∏è  No backup found, keeping current .env"
            fi

            # Create deployment info file
            echo "üìù Creating deployment info..."
            cat > deployment.json << DEPLOYEOF
            {
                "deployed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
                "commit_hash": "$(git rev-parse HEAD)",
                "commit_short": "$(git rev-parse --short HEAD)",
                "branch": "$(git rev-parse --abbrev-ref HEAD)",
                "tag": "$(git describe --tags --exact-match 2>/dev/null || echo 'none')",
                "deployed_by": "GitHub Actions",
                "environment": "production"
            }
            DEPLOYEOF

            # Set proper permissions before Laravel operations
            echo "üîê Setting proper permissions for Laravel operations..."
            # 1. Set user ownership first for all deployment operations
            sudo chown -R $USER:$USER .
            # 2. Ensure Laravel can write to required directories during operations
            chmod -R 775 storage bootstrap/cache
            chmod u+w .env

            # Run Laravel optimizations
            echo "‚ö° Running Laravel optimizations..."
            php artisan optimize:clear
            php artisan migrate --force
            php artisan db:seed --force --class=RolesSeeder
            php artisan optimize
            php artisan queue:restart

            # Set final web server permissions
            echo "üîê Setting final web server permissions..."
            # Set web server ownership for Laravel writable directories
            sudo chown -R www-data:www-data storage bootstrap/cache
            # Ensure web server can write
            sudo chmod -R 775 storage bootstrap/cache

            # Clean up safely
            echo "üßπ Cleaning up..."
            rm -f .env.backup

            echo "‚úÖ Deployment completed successfully!"

      - name: Notify Deployment Success
        if: success()
        run: echo "‚úÖ Application deployed successfully to production!"

      - name: Notify Deployment Failure
        if: failure()
        run: echo "‚ùå Deployment failed! Check the logs for details."
